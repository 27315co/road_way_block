#include <opencv2/opencv.hpp>
#include <iostream>
#include <string>

using namespace cv;
using namespace std;

void setLabel(Mat& image, string str, vector<Point> contour)
{
	int fontface = FONT_HERSHEY_SIMPLEX;
	double scale = 0.5;
	int thickness = 1;
	int baseline = 0;

	Size text = getTextSize(str, fontface, scale, thickness, &baseline);
	Rect r = boundingRect(contour);

	Point pt(r.x + ((r.width - text.width) / 2), r.y + ((r.height + text.height) / 2));
	putText(image, str, pt, fontface, scale, Scalar(155, 100, 122), thickness, 8);
}


int main()
{
	int range_count = 0;

	Scalar red(0, 0, 255);
	Scalar blue(255, 0, 0);
	Scalar yellow(0, 255, 255);

	Scalar block(113, 189, 219);

	Scalar magenta(255, 0, 255);


	Mat rgb_color = Mat(1, 1, CV_8UC3, yellow);
	Mat hsv_color;


	cvtColor(rgb_color, hsv_color, COLOR_BGR2HSV);

	// HSV 색 공간 Hue(색상) Saturation(채도) Value(명도)

	cout << " hsv_color " << hsv_color << endl;

	int hue = (int)hsv_color.at<Vec3b>(0, 0)[0];
	int saturation = (int)hsv_color.at<Vec3b>(0, 0)[1];
	int value = (int)hsv_color.at<Vec3b>(0, 0)[2];


	cout << "hue = " << hue << endl;
	cout << "saturation = " << saturation << endl;
	cout << "value = " << value << endl;


	int low_hue = hue - 10;
	int high_hue = hue + 10;

	int low_hue1 = 0, low_hue2 = 0;
	int high_hue1 = 0, high_hue2 = 0;

	if (low_hue < 10) {
		range_count = 2;

		high_hue1 = 180;
		low_hue1 = low_hue + 180;
		high_hue2 = high_hue;
		low_hue2 = 0;
	}
	else if (high_hue > 170) {
		range_count = 2;

		high_hue1 = low_hue;
		low_hue1 = 180;
		high_hue2 = high_hue - 180;
		low_hue2 = 0;
	}
	else {
		range_count = 1;

		low_hue1 = low_hue;
		high_hue1 = high_hue;
	}


	cout << low_hue1 << "  " << high_hue1 << endl;
	cout << low_hue2 << "  " << high_hue2 << endl;

	VideoCapture cap("f.avi");

	Mat img_frame, img_hsv;


	if (!cap.isOpened()) {
		cerr << "ERROR! Unable to open camera\n";
		return -1;
	}

	for (; ;)
	{

		cap.read(img_frame);

		// check if we succeeded


		if (img_frame.empty()) {
			cout << "Could not open or find the image" << std::endl;
			return -1;
		}


		//HSV로 변환
		cvtColor(img_frame, img_hsv, COLOR_BGR2HSV);


		//지정한 HSV 범위를 이용하여 영상을 이진화
		Mat img_mask1, img_mask2;
		inRange(img_hsv, Scalar(low_hue1, 50, 50), Scalar(high_hue1, 255, 255), img_mask1);
		if (range_count == 2) {
			inRange(img_hsv, Scalar(low_hue2, 50, 50), Scalar(high_hue2, 255, 255), img_mask2);
			img_mask1 |= img_mask2;
		}




		//morphological opening 작은 점들을 제거 
		erode(img_mask1, img_mask1, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));
		dilate(img_mask1, img_mask1, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));


		//morphological closing 영역의 구멍 메우기 
		dilate(img_mask1, img_mask1, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));
		erode(img_mask1, img_mask1, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));


		//라벨링 
		Mat img_labels, stats, centroids;
		int numOfLables = connectedComponentsWithStats(img_mask1, img_labels,
			stats, centroids, 8, CV_32S);


		//영역박스 그리기
		int max = -1, idx = 0;
		for (int j = 1; j < numOfLables; j++) {
			int area = stats.at<int>(j, CC_STAT_AREA);
			if (max < area)
			{
				max = area;
				idx = j;
			}
		}


		int left = stats.at<int>(idx, CC_STAT_LEFT);
		int top = stats.at<int>(idx, CC_STAT_TOP);
		int width = stats.at<int>(idx, CC_STAT_WIDTH);
		int height = stats.at<int>(idx, CC_STAT_HEIGHT);


		rectangle(img_frame, Point(left, top), Point(left + width, top + height),
			Scalar(0, 0, 255), 1);

		Rect rect(left, top, width, height);

		Mat subImage = img_frame(rect);

		cvtColor(subImage, img_hsv, COLOR_BGR2HSV);

		inRange(img_hsv, Scalar(low_hue1, 50, 50), Scalar(high_hue1, 255, 255), img_mask1);
		if (range_count == 2) {
			inRange(img_hsv, Scalar(low_hue2, 50, 50), Scalar(high_hue2, 255, 255), img_mask2);
			img_mask1 |= img_mask2;
		}

		//morphological opening 작은 점들을 제거 
		erode(img_mask1, img_mask1, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));
		dilate(img_mask1, img_mask1, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));


		//morphological closing 영역의 구멍 메우기 
		dilate(img_mask1, img_mask1, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));
		erode(img_mask1, img_mask1, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));

		img_mask1 = ~img_mask1;
		/*
		imshow("이진화 영상", img_mask1);
		imshow("원본 영상", subImage);
		*/


		Mat img_result, img_gray;

		Mat sample;
		sample = img_mask1;



		//	cvtColor(img_mask1, img_gray, COLOR_BGR2GRAY);

		Mat binary_image;
		threshold(img_mask1, img_mask1, 125, 255, THRESH_BINARY_INV | THRESH_OTSU);

		vector<vector<Point> > contours;
		findContours(img_mask1, contours, RETR_LIST, CHAIN_APPROX_SIMPLE);

		vector<Point2f> approx;
		img_result = sample.clone();


		imshow("img_result", img_result);


		for (size_t i = 0; i < contours.size(); i++)
		{
			approxPolyDP(Mat(contours[i]), approx, arcLength(Mat(contours[i]), true)*0.02, true);

			if (fabs(contourArea(Mat(approx))) > 100)  //면적이 일정크기 이상이어야 한다.
			{

				int size = approx.size();

				//Contour를 근사화한 직선을 그린다.
				if (size % 2 == 0) {
					line(img_result, approx[0], approx[approx.size() - 1], Scalar(120, 20, 0), 3);

					for (int k = 0; k < size - 1; k++)
						line(img_result, approx[k], approx[k + 1], Scalar(120, 20, 0), 3);

					for (int k = 0; k < size; k++)
						circle(img_result, approx[k], 3, Scalar(0, 0, 255));
				}
				else {
					line(img_result, approx[0], approx[approx.size() - 1], Scalar(120, 20, 0), 3);

					for (int k = 0; k < size - 1; k++)
						line(img_result, approx[k], approx[k + 1], Scalar(120, 20, 0), 3);

					for (int k = 0; k < size; k++)
						circle(img_result, approx[k], 3, Scalar(0, 0, 255));
				}



				//도형을 판정한다.
				if (size == 3)
					setLabel(img_result, "triangle", contours[i]); //삼각형

																   //이하는 해당 꼭지점을 가진 convex라면 찾는 도형
				else if (size == 4 && isContourConvex(Mat(approx)))
					setLabel(img_result, "rectangle", contours[i]); //사각형

				else if (size == 5 && isContourConvex(Mat(approx)))
					setLabel(img_result, "pentagon", contours[i]); //오각형

				else if (size == 6 && isContourConvex(Mat(approx)))
					setLabel(img_result, "hexagon", contours[i]);  //육각형

				else if (size == 10 && isContourConvex(Mat(approx)))
					setLabel(img_result, "decagon", contours[i]);    //십각형

																	 //위 조건에 해당 안되는 경우는 찾아낸 꼭지점 갯수를 표시
				else setLabel(img_result, to_string(approx.size()), contours[i]);
			}

		}

		imshow("input", sample);
		imshow("result", img_result);



		if (waitKey(5) >= 0)
			break;

	}

	return 0;
}
